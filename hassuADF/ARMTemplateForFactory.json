{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "hassuADF"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"LS_AzureDataLake_Gen_2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_AzureDataLake_Gen_2'"
		},
		"LS_Azure_Blob_hassu_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Azure_Blob_hassu'"
		},
		"AzureBlobStorage1_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "azureblobStrogeKey"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hasnain2gen2.dfs.core.windows.net/"
		},
		"LS_AzureBlobStorage_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "azureblobStrogeKey"
		},
		"LS_AzureDataLake_Gen_2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hassugen2.dfs.core.windows.net/"
		},
		"LS_AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://hasnainkeyvault.vault.azure.net/"
		},
		"LS_HttpConnection_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"MN_LS_AzureBlobStorage369_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/fbfddf6c-4cf9-4297-8169-dd687c9e780b/resourceGroups/hassuPR/providers/Microsoft.Storage/storageAccounts/hassublob"
		},
		"MN_LS_AzureBlobStorage369_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"Managed_private_endpointAzureDataLakeStorage_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/fbfddf6c-4cf9-4297-8169-dd687c9e780b/resourceGroups/hassuPR/providers/Microsoft.Storage/storageAccounts/hassugen2"
		},
		"Managed_private_endpointAzureDataLakeStorage_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"mgprivateEndpoint_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/adc2a681-05ac-43c7-88b8-3e16517bb308/resourceGroups/hasnainPR/providers/Microsoft.Sql/servers/azuresqlserver001"
		},
		"mgprivateEndpoint_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"mgprivateEndpoint_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"azuresqlserver001.database.windows.net"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_3f0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_3f0",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "hasnain//customers.csv"
							},
							{
								"name": "Destination",
								"value": "hasnain//customerData.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"blockSizeInMB": 4
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_3f0",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_3f0",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T14:59:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_3f0')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_3f0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Blob_To_SQLDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Getfiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter csv files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv' )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach for getting file then write into DB",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter csv files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter csv files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from blob to azure DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_inputfile_for_sql",
											"type": "DatasetReference",
											"parameters": {
												"sourceFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sqltable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@substring(item().name,0,sub(length(item().name),4))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-19T12:48:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Getfiles')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputfile_for_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqltable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LoadFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_inputsFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv' )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach after filter file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from blob to dataleg gen2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_inputfiles01",
											"type": "DatasetReference",
											"parameters": {
												"sourceFile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_outputFiles",
											"type": "DatasetReference",
											"parameters": {
												"sinkFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-19T08:50:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputsFiles')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputfiles01')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SQLDB_TO_ADLFGen2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get tables from DB",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM hasnain.INFORMATION_SCHEMA.TABLES WHERE table_type='BASE TABLE';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach for read tables name",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get tables from DB",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get tables from DB').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from SQL DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_inputsqltables",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"table_schema": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_outputFileFrom_sqlDB",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().TABLE_SCHEMA,'_',item().TABLE_NAME,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-19T13:32:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputsqltables')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputFileFrom_sqlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_dynamicParamterWithHTTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetHTTPData",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_inputJson",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach for get path",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetHTTPData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetHTTPData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from http using paths",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_inputfileshttp",
											"type": "DatasetReference",
											"parameters": {
												"sourceBaseURL": {
													"value": "@item().sourceBaseURL",
													"type": "Expression"
												},
												"sourceRelativeURL": {
													"value": "@item().sourceRelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_outputParquet",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().sinkFileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-19T10:16:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputJson')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputfileshttp')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_run_data_flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow for sales data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_crif_dataflow_split_data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CRIF": {},
									"Individual": {},
									"Joint": {},
									"Guarantor": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_crif_dataflow_split_data')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_3f0')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customerData.csv",
						"fileSystem": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_3f0')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"container": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "ZIP",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "Fax",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Web",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_CRIF_data_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_Blob_hassu",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CRIF_Consumer_data.xlsx",
						"container": "hassu"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_Blob_hassu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Getfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ecdcdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_crif_data_ouput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDataLake_Gen_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "CRIF/OWNERSHIP_IND",
						"fileSystem": "hassu"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDataLake_Gen_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_crif_output_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDataLake_Gen_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "crif",
						"folderPath": "CRIF",
						"fileSystem": "hassu"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDataLake_Gen_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_sales_drive_inputs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Aus_IND_Sales.csv",
						"container": "salesdrive"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order_id",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ecdc_file_list.json",
						"container": "config"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputfile_for_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().sourceFileName",
							"type": "Expression"
						},
						"container": "ecdcdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputfiles01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceFile": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().sourceFile",
							"type": "Expression"
						},
						"container": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputfileshttp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HttpConnection",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().sourceBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"sourceBaseURL": {
						"type": "string"
					},
					"sourceRelativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().sourceRelativeURL",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HttpConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputsFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputsqltables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					},
					"table_schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().table_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "family.csv",
						"container": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_output_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movieOutput",
						"fileSystem": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_output_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movie_output_parquet",
						"fileSystem": "hasnain"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputFileFrom_sqlDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "outputTables",
						"fileSystem": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "hasnain"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "inputDataFromGit",
						"fileSystem": "http"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_output_sales_data_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "filterJsonFiles",
						"fileSystem": "hasnain"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqltable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LS_Azure_Blob_Storage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage1_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_AzureBlobStorage_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDataLake_Gen_2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_AzureDataLake_Gen_2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_AzureDataLake_Gen_2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Azure_Blob_hassu')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Azure_Blob_hassu_connectionString')]"
				},
				"connectVia": {
					"referenceName": "hassuBlobIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/hassuBlobIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HttpConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"baseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HttpConnection_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowintegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Central India",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/hassuBlobIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Central India",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_crif_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_CRIF_data_input",
								"type": "DatasetReference"
							},
							"name": "CRIF"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_crif_output_json",
								"type": "DatasetReference"
							},
							"name": "OWNERSHIP"
						}
					],
					"transformations": [
						{
							"name": "ByOWNERSHIPIND"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RESPONSES as string,",
						"          RESPONSE as string,",
						"          {LOAN-DETAILS} as string,",
						"          {ACCT-NUMBER} as string,",
						"          {CREDIT-GUARANTOR} as string,",
						"          {ACCT-TYPE} as string,",
						"          {DATE-REPORTED} as date,",
						"          {OWNERSHIP-IND} as string,",
						"          {ACCOUNT-STATUS} as string,",
						"          {DISBURSED-AMT} as integer,",
						"          {DISBURSED-DT} as date,",
						"          {CLOSED-DATE} as date,",
						"          {INSTALLMENT-AMT} as string,",
						"          {WRITE-OFF-AMT} as boolean,",
						"          {CURRENT-BAL} as integer,",
						"          {COMBINED-PAYMENT-HISTORY} as string,",
						"          {MATCHED-TYPE} as string,",
						"          {LINKED-ACCOUNTS} as string,",
						"          {PRINCIPAL-WRITE-OFF-AMT} as boolean,",
						"          {SECURITY-DETAILS} as string,",
						"          {SECURITY-DETAIL} as string,",
						"          {SECURITY-TYPE} as string,",
						"          {OWNER-NAME} as short,",
						"          {SECURITY-VALUE} as integer,",
						"          {SECURITY-CHARGE} as string,",
						"          {PROPERTY-ADDRESS} as string,",
						"          {SETTLEMENT-AMT} as boolean,",
						"          {LAST-PAYMENT-DATE} as date,",
						"          {OVERDUE-AMT} as boolean,",
						"          {SUIT-FILED_WILFUL-DEFAULT} as string,",
						"          {WRITTEN-OFF_SETTLED-STATUS} as string,",
						"          {ACTUAL-PAYMENT} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CRIF",
						"CRIF aggregate(groupBy({OWNERSHIP-IND}),",
						"     TotalAmount = sum({DISBURSED-AMT}),",
						"          MinAmount = min({DISBURSED-AMT}),",
						"          MaxAmount = max({DISBURSED-AMT}),",
						"          AvrgAmount = avg({DISBURSED-AMT})) ~> ByOWNERSHIPIND",
						"ByOWNERSHIPIND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['crifFilteredData'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OWNERSHIP"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_CRIF_data_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_crif_output_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_crif_dataflow_split_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_CRIF_data_input",
								"type": "DatasetReference"
							},
							"name": "CRIF"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_crif_data_ouput",
								"type": "DatasetReference"
							},
							"name": "Individual"
						},
						{
							"dataset": {
								"referenceName": "ds_crif_data_ouput",
								"type": "DatasetReference"
							},
							"name": "Joint",
							"rejectedDataLinkedService": {
								"referenceName": "LS_AzureDataLake_Gen_2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_crif_data_ouput",
								"type": "DatasetReference"
							},
							"name": "Guarantor"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RESPONSES as string,",
						"          RESPONSE as string,",
						"          {LOAN-DETAILS} as string,",
						"          {ACCT-NUMBER} as string,",
						"          {CREDIT-GUARANTOR} as string,",
						"          {ACCT-TYPE} as string,",
						"          {DATE-REPORTED} as date,",
						"          {OWNERSHIP-IND} as string,",
						"          {ACCOUNT-STATUS} as string,",
						"          {DISBURSED-AMT} as integer,",
						"          {DISBURSED-DT} as date,",
						"          {CLOSED-DATE} as date,",
						"          {INSTALLMENT-AMT} as string,",
						"          {WRITE-OFF-AMT} as boolean,",
						"          {CURRENT-BAL} as integer,",
						"          {COMBINED-PAYMENT-HISTORY} as string,",
						"          {MATCHED-TYPE} as string,",
						"          {LINKED-ACCOUNTS} as string,",
						"          {PRINCIPAL-WRITE-OFF-AMT} as boolean,",
						"          {SECURITY-DETAILS} as string,",
						"          {SECURITY-DETAIL} as string,",
						"          {SECURITY-TYPE} as string,",
						"          {OWNER-NAME} as short,",
						"          {SECURITY-VALUE} as integer,",
						"          {SECURITY-CHARGE} as string,",
						"          {PROPERTY-ADDRESS} as string,",
						"          {SETTLEMENT-AMT} as boolean,",
						"          {LAST-PAYMENT-DATE} as date,",
						"          {OVERDUE-AMT} as boolean,",
						"          {SUIT-FILED_WILFUL-DEFAULT} as string,",
						"          {WRITTEN-OFF_SETTLED-STATUS} as string,",
						"          {ACTUAL-PAYMENT} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CRIF",
						"CRIF split({OWNERSHIP-IND}=='Individual',",
						"     {OWNERSHIP-IND}=='Joint',",
						"     {OWNERSHIP-IND}=='Guarantor',",
						"     disjoint: false) ~> split1@(Individual, Joint, Guarantor)",
						"split1@Joint select(mapColumn(",
						"          {CREDIT-GUARANTOR},",
						"          {ACCT-TYPE},",
						"          {DATE-REPORTED},",
						"          {OWNERSHIP-IND},",
						"          {ACCOUNT-STATUS},",
						"          {DISBURSED-AMT},",
						"          {DISBURSED-DT},",
						"          {CLOSED-DATE},",
						"          {INSTALLMENT-AMT},",
						"          {WRITE-OFF-AMT},",
						"          {CURRENT-BAL},",
						"          {COMBINED-PAYMENT-HISTORY},",
						"          {MATCHED-TYPE},",
						"          {LINKED-ACCOUNTS},",
						"          {PRINCIPAL-WRITE-OFF-AMT},",
						"          {SECURITY-DETAILS},",
						"          {SECURITY-DETAIL},",
						"          {SECURITY-TYPE},",
						"          {OWNER-NAME},",
						"          {SECURITY-VALUE},",
						"          {SECURITY-CHARGE},",
						"          {PROPERTY-ADDRESS},",
						"          {SETTLEMENT-AMT},",
						"          {LAST-PAYMENT-DATE},",
						"          {OVERDUE-AMT},",
						"          {SUIT-FILED_WILFUL-DEFAULT},",
						"          {WRITTEN-OFF_SETTLED-STATUS},",
						"          {ACTUAL-PAYMENT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@Individual select(mapColumn(",
						"          {CREDIT-GUARANTOR},",
						"          {ACCT-TYPE},",
						"          {DATE-REPORTED},",
						"          {OWNERSHIP-IND},",
						"          {ACCOUNT-STATUS},",
						"          {DISBURSED-AMT},",
						"          {DISBURSED-DT},",
						"          {CLOSED-DATE},",
						"          {INSTALLMENT-AMT},",
						"          {WRITE-OFF-AMT},",
						"          {CURRENT-BAL},",
						"          {COMBINED-PAYMENT-HISTORY},",
						"          {MATCHED-TYPE},",
						"          {LINKED-ACCOUNTS},",
						"          {PRINCIPAL-WRITE-OFF-AMT},",
						"          {SECURITY-DETAILS},",
						"          {SECURITY-DETAIL},",
						"          {SECURITY-TYPE},",
						"          {OWNER-NAME},",
						"          {SECURITY-VALUE},",
						"          {SECURITY-CHARGE},",
						"          {PROPERTY-ADDRESS},",
						"          {SETTLEMENT-AMT},",
						"          {LAST-PAYMENT-DATE},",
						"          {OVERDUE-AMT},",
						"          {SUIT-FILED_WILFUL-DEFAULT},",
						"          {WRITTEN-OFF_SETTLED-STATUS},",
						"          {ACTUAL-PAYMENT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"split1@Guarantor select(mapColumn(",
						"          {CREDIT-GUARANTOR},",
						"          {ACCT-TYPE},",
						"          {DATE-REPORTED},",
						"          {OWNERSHIP-IND},",
						"          {ACCOUNT-STATUS},",
						"          {DISBURSED-AMT},",
						"          {DISBURSED-DT},",
						"          {CLOSED-DATE},",
						"          {INSTALLMENT-AMT},",
						"          {WRITE-OFF-AMT},",
						"          {CURRENT-BAL},",
						"          {COMBINED-PAYMENT-HISTORY},",
						"          {MATCHED-TYPE},",
						"          {LINKED-ACCOUNTS},",
						"          {PRINCIPAL-WRITE-OFF-AMT},",
						"          {SECURITY-DETAILS},",
						"          {SECURITY-DETAIL},",
						"          {SECURITY-TYPE},",
						"          {OWNER-NAME},",
						"          {SECURITY-VALUE},",
						"          {SECURITY-CHARGE},",
						"          {PROPERTY-ADDRESS},",
						"          {SETTLEMENT-AMT},",
						"          {LAST-PAYMENT-DATE},",
						"          {OVERDUE-AMT},",
						"          {SUIT-FILED_WILFUL-DEFAULT},",
						"          {WRITTEN-OFF_SETTLED-STATUS},",
						"          {ACTUAL-PAYMENT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Individual.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Individual",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Joint.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Joint",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Guarantor.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Guarantor"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_CRIF_data_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_crif_data_ouput')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDataLake_Gen_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dataflow_movie')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_movie_input",
								"type": "DatasetReference"
							},
							"name": "faimlyMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_movie_output_csv",
								"type": "DatasetReference"
							},
							"name": "movieSink"
						}
					],
					"transformations": [
						{
							"name": "moviedata"
						},
						{
							"name": "sortByRating"
						},
						{
							"name": "filterByRating"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie_id as string,",
						"          movie_name as string,",
						"          year as string,",
						"          certificate as string,",
						"          runtime as string,",
						"          genre as string,",
						"          rating as double,",
						"          description as string,",
						"          director as string,",
						"          director_id as string,",
						"          star as string,",
						"          star_id as string,",
						"          votes as string,",
						"          {gross(in $)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> faimlyMovie",
						"faimlyMovie select(mapColumn(",
						"          movie_id,",
						"          movie_name,",
						"          year,",
						"          certificate,",
						"          genre,",
						"          rating,",
						"          description,",
						"          director,",
						"          director_id,",
						"          star,",
						"          star_id,",
						"          votes,",
						"          {gross in USD} = {gross(in $)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> moviedata",
						"filterByRating sort(asc(rating, false)) ~> sortByRating",
						"moviedata filter(rating>=5) ~> filterByRating",
						"sortByRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['faimly_movie'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     format: 'parquet') ~> movieSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_movie_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_movie_output_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dataflow_sales_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_df_sales_drive_inputs",
								"type": "DatasetReference"
							},
							"name": "salesData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_output_sales_data_json",
								"type": "DatasetReference"
							},
							"name": "sinkData"
						}
					],
					"transformations": [
						{
							"name": "filterbasedonCountry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Order_id as short,",
						"          Country as string,",
						"          Year as short,",
						"          Sales as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> salesData",
						"salesData filter(Country=='IND' && Year>=2016) ~> filterbasedonCountry",
						"filterbasedonCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_df_sales_drive_inputs')]",
				"[concat(variables('factoryId'), '/datasets/ds_output_sales_data_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/MN_LS_AzureBlobStorage369')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('MN_LS_AzureBlobStorage369_properties_privateLinkResourceId')]",
				"groupId": "[parameters('MN_LS_AzureBlobStorage369_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/Managed_private_endpointAzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('Managed_private_endpointAzureDataLakeStorage_properties_privateLinkResourceId')]",
				"groupId": "[parameters('Managed_private_endpointAzureDataLakeStorage_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/mgprivateEndpoint')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('mgprivateEndpoint_properties_privateLinkResourceId')]",
				"groupId": "[parameters('mgprivateEndpoint_properties_groupId')]",
				"fqdns": "[parameters('mgprivateEndpoint_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}